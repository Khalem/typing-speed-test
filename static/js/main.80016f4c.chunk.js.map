{"version":3,"sources":["components/letter/letter.component.jsx","components/word-box/word-box.component.jsx","components/user-input/user-input.component.jsx","components/stats/stats.component.jsx","assets/arrow.svg","components/results/results.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Letter","letter","index","userInput","style","length","className","WordBox","words","userIndex","correctUserWords","mistakes","map","word","includes","split","UserInput","handleChange","handleKeyDown","gameStarted","autoComplete","type","name","placeholder","value","onChange","onKeyDown","Stats","cpm","wpm","time","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgArrow","_ref","svgRef","title","titleId","props","width","height","ref","id","transform","fontSize","fontStyle","fontVariant","fontWeight","fontStretch","textAlign","lineHeight","writingMode","textAnchor","fill","fillOpacity","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeOpacity","fontFamily","InkscapeFontSpecification","d","ForwardRef","Results","rawCPM","correctedCPM","restart","resultVariants","hidden","opacity","y","visible","transition","delay","h1","initial","custom","animate","variants","div","arrowColor","icon","faQuestionCircle","data-tip","data-for","whileHover","x","onClick","App","wordWrap","document","querySelectorAll","offset","offsetTop","rows","scrollBox","posNeg","parseInt","newRow","getElementById","scrollIntoView","behavior","countdown","state","clearInterval","countdownInterval","setState","gameOver","event","nativeEvent","data","match","userWords","correctUserChars","push","forEach","calculateCPM","setInterval","newCorrectUserWords","filter","newMistakes","pop","join","wordsPerCPM","Math","round","a","RandomWords","exactly","maxLength","window","addEventListener","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.80016f4c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './letter.styles.scss';\r\n\r\nconst Letter = ({ letter, index, userInput }) => {\r\n    let style = '';\r\n\r\n    if (userInput && letter === userInput[index]) {\r\n        style = 'correctLetter';\r\n    } else if (userInput && userInput.length > index && letter !== userInput[index]) {\r\n        style = 'incorrectLetter';\r\n    }\r\n\r\n    return (\r\n        <span className={style}>{letter}</span>\r\n    );\r\n}\r\n\r\nexport default Letter;","import React from 'react';\r\n\r\nimport Letter from '../letter/letter.component';\r\n\r\nimport './word-box.styles.scss';\r\n\r\nconst WordBox = ({ words, userIndex, userInput, correctUserWords, mistakes }) => {\r\n    return (\r\n        <div className='word-box'>\r\n            {\r\n              words.map((word, index) => {\r\n                let style = '';\r\n                \r\n                if (correctUserWords.includes(index) && index !== userIndex) {\r\n                  style = 'correct';\r\n                } else if (mistakes.includes(index) && index !== userIndex) {\r\n                  style = 'mistake';\r\n                } else if (index === userIndex) {\r\n                  style = 'active';\r\n                }\r\n                \r\n                // if current word, have each letter a span so user can get live feedback\r\n                if (index === userIndex) {\r\n                  return <div key={index} className={`word ${style}`}>\r\n                    { word.split(\"\").map((letter, index) => (\r\n                      <Letter \r\n                        letter={letter}\r\n                        index={index}\r\n                        userInput={userInput}\r\n                        key={`${index}: ${letter}`}\r\n                      />\r\n                    )) }\r\n                  </div>\r\n                } else {\r\n                  return <div key={index} className={`word ${style}`}>{word}</div>\r\n                }\r\n              })\r\n            }\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default WordBox;","import React from 'react';\r\n\r\nimport './user-input.styles.scss';\r\n\r\nconst UserInput = ({ handleChange, handleKeyDown, userInput, gameStarted }) => {\r\n    return (\r\n        <div className='input-box'>\r\n            <input \r\n                autoComplete=\"off\"\r\n                type='text' \r\n                name='Word Input' \r\n                className='user-input'\r\n                // when game starts, ternary to display placeholder\r\n                placeholder={gameStarted ? '' : 'type here..'}\r\n                value={userInput}\r\n                onChange={handleChange}\r\n                onKeyDown={handleKeyDown}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserInput;","import React from 'react';\r\n\r\nimport './stats.styles.scss';\r\n\r\nconst Stats = ({ cpm, wpm, time }) => {\r\n    return (\r\n        <div className='stats-container'>\r\n            <div className='cpm'>\r\n                <h1>{cpm}</h1>\r\n                <h2>CPM</h2>\r\n            </div>\r\n            <div className='wpm'>\r\n                <h1>{wpm}</h1>\r\n                <h2>WPM</h2>\r\n            </div>\r\n            <div className='time'>\r\n                <h1>{time}</h1>\r\n                <h2>Time</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Stats;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrow(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"25px\",\n    height: \"14.33px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(-129.2839,-764.01857)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      fontSize: \"39.50617218px\",\n      fontStyle: \"normal\",\n      fontVariant: \"normal\",\n      fontWeight: \"normal\",\n      fontStretch: \"normal\",\n      textAlign: \"start\",\n      lineHeight: \"100%\",\n      writingMode: \"lr-tb\",\n      textAnchor: \"start\",\n      fill: \"#fff\",\n      fillOpacity: 1,\n      stroke: \"none\",\n      strokeWidth: 1,\n      strokeLinecap: \"butt\",\n      strokeLinejoin: \"miter\",\n      strokeOpacity: 1,\n      fontFamily: \"Arial Unicode MS\",\n      InkscapeFontSpecification: \"Arial Unicode MS\"\n    },\n    d: \"M 153.63455,771.63163 C 150.59872,772.74111 148.22736,774.53943 146.5205,777.02659 L 145.22205,777.02659 C 145.80725,775.28315 146.7887,773.63722 148.16642,772.08883 L 129.93325,772.08883 L 129.93325,770.2966 L 148.16642,770.2966 C 146.7887,768.74822 145.80725,767.0962 145.22205,765.34054 L 146.5205,765.34054 C 148.22736,767.82772 150.59872,769.62605 153.63455,770.73551 L 153.63455,771.63163 z\",\n    id: \"text6007\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrow);\nexport default __webpack_public_path__ + \"static/media/arrow.87f5359f.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport './results.styles.scss';\r\n\r\nimport { ReactComponent as Arrow } from '../../assets/arrow.svg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Results = ({ rawCPM, correctedCPM, wpm, restart }) => {\r\n    /*\r\n        All elements will share the same animation, only difference is the delay,\r\n        so I will use dynamic variants to avoid DRY code\r\n    */\r\n    const resultVariants = {\r\n        hidden: {\r\n            opacity: 0,\r\n            y: 100\r\n        },\r\n        visible: i => ({\r\n            opacity: 1,\r\n            y: 0,\r\n            transition: {\r\n                delay: 1 * i\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='results-container'>\r\n            <motion.h1 className='results-title' initial='hidden' custom={.25} animate='visible' variants={resultVariants} >Congrats! You achieved</motion.h1>\r\n            <motion.h1 className='wpm' initial='hidden' custom={.35} animate='visible' variants={resultVariants}>{wpm} Words Per Minute!</motion.h1>\r\n            <motion.div\r\n                className='results'\r\n                custom={1}\r\n                initial='hidden'\r\n                animate='visible'\r\n                variants={resultVariants}\r\n            >\r\n                <div className='raw-cpm'>\r\n                    <ReactTooltip className='information-text' id='raw_info' arrowColor='var(--light-bg)'>\r\n                        Raw CPM is the total amount of characters you typed in a minute. This includes mistakes and is not\r\n                        considered when calculating your WPM.\r\n                    </ReactTooltip>\r\n                    <h2>{rawCPM}</h2>\r\n                    <h3><FontAwesomeIcon icon={faQuestionCircle} className='information' data-tip data-for='raw_info' /> Raw CPM</h3>\r\n                </div>\r\n                <div className='corrected-cpm'>\r\n                    <ReactTooltip className='information-text' id='corrected_info' arrowColor='var(--light-bg)'>\r\n                        Corrected CPM is the amount of characters you typed that were correct. This the value we use to determine\r\n                        your WPM. \r\n                    </ReactTooltip>\r\n                    <h2>{correctedCPM}</h2>\r\n                    <h3><FontAwesomeIcon icon={faQuestionCircle} className='information' data-tip data-for='corrected_info' /> Corrected CPM</h3>\r\n                </div>\r\n            </motion.div>\r\n            <motion.h1\r\n                className='restart'\r\n                custom={2}\r\n                initial='hidden'\r\n                animate='visible'\r\n                variants={resultVariants}\r\n                whileHover={{\r\n                    x: -20\r\n                }}\r\n                onClick={restart}\r\n            >\r\n                Like to try again?\r\n                <Arrow  className='arrow' />\r\n            </motion.h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Results;","import React from 'react';\nimport RandomWords from 'random-words';\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport WordBox from './components/word-box/word-box.component';\nimport UserInput from './components/user-input/user-input.component';\nimport Stats from './components/stats/stats.component';\nimport Results from './components/results/results.component';\n\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      words: RandomWords({exactly: 200, maxLength: 7 }),\n      userWords: [],\n      correctUserWords: [],\n      correctUserChars: [],\n      userInput: '',\n      mistakes: [],\n      index: 0,\n      rawCPM: 0,\n      correctedCPM: 0,\n      wpm: 0,\n      time: 60,\n      gameStarted: false,\n      gameOver: false\n    }\n  }\n\n  componentDidMount() {\n    // Need to wait for DOM to load as I'm giving ID's based off their top offset\n    window.addEventListener('load', this.wordWrap);\n  }\n\n  /*\n    Because of different window sizes, I won't hard code when each line ends,\n    instead I will dynamically give IDs to let me know when a row ends,\n    so that I can auto scroll effectively\n  */\n  wordWrap = () => {\n    const words = document.querySelectorAll('.word');\n    let offset = words[0].offsetTop;\n    let rows = 0;\n\n    for (let i = 0; i < words.length; i++) {\n      if (words[i].offsetTop > offset) {\n        words[i-1].id = `row-${rows}`;\n        rows+=1;\n        offset = words[i].offsetTop;\n      }\n    }\n  }\n\n  /*\n    I'm using 'scroll-into-view-if-needed' as vanilla JS' '.scrollIntoView()' doesn't seem to smooth-scroll.\n    When a word has an ID, I get the elemenet to scroll to by adding 1 to the ID. \n    This will be called in this.handleChange and this.handleKeyDown to scroll both up and down\n  */\n  scrollBox = (index, posNeg) => {\n    const wordBoxWords = document.querySelectorAll('.word');\n    const word = wordBoxWords[index];\n\n    if (word.id) {\n      let id = parseInt(word.id.split(\"-\")[1]);\n      let newRow = document.getElementById(`row-${id + posNeg}`);\n      if (newRow) scrollIntoView(newRow, { behavior: 'smooth' });\n    }\n  }\n\n  countdown = () => {\n    const time = this.state.time - 1;\n\n    // if times up, end countdown and game\n    if (time === 0) {\n      clearInterval(this.countdownInterval);\n      this.setState({ gameOver: true, gameStarted: false, time: 60 });\n    } else {\n      this.setState({ time });\n    }\n  }\n\n  handleChange = event => {\n    if (event.nativeEvent.data === ' ' && event.target.value.match(/\\S/)) {\n      let { words, userWords, correctUserWords, index, mistakes, correctUserChars } = this.state;\n      userWords.push(event.target.value);\n      \n      if (event.target.value === words[index] + ' ') {\n        correctUserWords.push(index);\n        correctUserChars.push(words[index]);\n      } else {\n        // Even if the user got the word wrong, I need to log the letters they did get correct.\n        let word = words[index].split(\"\");\n        word.forEach((letter, i) => {\n          if (letter == event.target.value[i]) correctUserChars.push(letter);\n        });\n\n        mistakes.push(index);\n      }\n\n      this.scrollBox(index, 1);\n      this.calculateCPM();\n\n      this.setState({ userWords, correctUserWords, mistakes, userInput: '', index: index+=1 });\n    } else if (event.nativeEvent.data === ' ' && event.target.value.match(/\\s/)) {\n      // if user only inputs spaces, don't update state\n      return false;\n    } else {\n      // if game hasn't started yet, start countdown\n      if (this.state.gameStarted === false) {\n        this.countdownInterval = setInterval(() => {\n          this.countdown();\n        }, 1000);\n\n        this.setState({ gameStarted: true });\n      }\n\n      this.setState({ userInput: event.target.value });\n    }\n  }\n\n  // This function will handle the backspace key, as its undetectable using onChange when the input is already empty\n  handleKeyDown = event => {\n    if (!event.target.value && event.key === 'Backspace') {\n      let { userWords, correctUserWords, mistakes, index } = this.state;\n      let userInput = userWords[userWords.length-1];\n      let newCorrectUserWords = correctUserWords.filter(word => word !== index && word !== index - 1);\n      let newMistakes = mistakes.filter(word => word !== index);\n\n      index = userWords.length ? index - 1 : index;\n\n      this.scrollBox(index, -1);\n\n      userWords.pop();\n\n      this.setState({ userWords, correctUserWords: newCorrectUserWords, mistakes: newMistakes, userInput, index });\n    }\n  }\n\n  calculateCPM = () => {\n    let userWords = this.state.userWords.join(\"\");\n    let userCorrectWords = this.state.correctUserChars;\n\n    let correctUserWords = userCorrectWords.join(\"\");\n    let rawCPM = userWords.length;\n    let correctedCPM = correctUserWords.length;\n    let wordsPerCPM = Math.round(correctedCPM / 5);\n    let wpm = this.state.time < 60 ? Math.round(wordsPerCPM / ((60 - this.state.time) / 60)) : 0;\n\n    this.setState({ rawCPM, correctedCPM, wpm });\n  }\n\n  restart = async () => {\n    const state = {\n      words: RandomWords({exactly: 200, maxLength: 5 }),\n      userWords: [],\n      correctUserWords: [],\n      correctUserChars: [],\n      userInput: '',\n      mistakes: [],\n      index: 0,\n      rawCPM: 0,\n      correctedCPM: 0,\n      wpm: 0,\n      time: 60,\n      gameStarted: false,\n      gameOver: false\n    }\n\n    await this.setState({ ...state });\n\n    await this.wordWrap();\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        {\n          !this.state.gameOver ?\n          <div>\n            <h1 className='title'>Typing Speed Test</h1>\n            <h2 className='heading'>In this test, you will be given 60 seconds to type the most common English words as fast as you can.\n              You will be judged only on correct words, so accuracy is everything! Your time will start as soon\n              as you start typing. Good luck!\n            </h2>\n            <div className='box'>\n            <Stats \n              cpm={this.state.correctedCPM}\n              wpm={this.state.wpm}\n              time={this.state.time}\n            />\n            <WordBox \n              words={this.state.words} \n              userIndex={this.state.index}\n              correctUserWords={this.state.correctUserWords}\n              mistakes={this.state.mistakes}\n              userInput={this.state.userInput}\n            />\n            <UserInput \n              handleKeyDown={this.handleKeyDown}\n              handleChange={this.handleChange}\n              userInput={this.state.userInput} \n              gameStarted={this.state.gameStarted}\n            />\n          </div>\n        </div>\n        :\n        <div className='game-over-box'>\n          <Results \n            rawCPM={this.state.rawCPM}\n            correctedCPM={this.state.correctedCPM}\n            wpm={this.state.wpm}\n            restart={this.restart}\n          />\n        </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}